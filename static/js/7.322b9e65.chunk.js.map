{"version":3,"sources":["pages/shop/style-shop.jsx","pages/shop/shop-page.jsx"],"names":["ShopPageContainer","styled","div","CollectionsOverviewContainer","React","lazy","CollectionPageContainer","ShopPage","fetchCollectionsRequest","this","props","match","fallback","exact","path","component","Component","connect","dispatch"],"mappings":"4RAEO,IAAMA,E,KAAoBC,EAAOC,IAAV,K,QCuBxBC,EAA+BC,IAAMC,MAAK,kBAC9C,gCAGIC,EAA0BF,IAAMC,MAAK,kBACzC,gCAGIE,E,mLASJC,EADkCC,KAAKC,MAAhCF,6B,+BAoCE,IACAG,EAAQF,KAAKC,MAAbC,MAEP,OACE,kBAACX,EAAD,KACA,kBAAC,WAAD,CAAUY,SAAU,kBAAC,IAAD,OAClB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAI,UAAKH,EAAMG,MAAQC,UAAWZ,IAC/C,kBAAC,IAAD,CACAW,KAAI,UAAKH,EAAMG,KAAX,kBACJC,UAAWT,U,GArDIF,IAAMY,WAuEdC,sBAAQ,MALI,SAAAC,GAAQ,MAAI,CAErCV,wBAAyB,kBAAMU,EAASV,mBAG3BS,CAAkCV","file":"static/js/7.322b9e65.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const ShopPageContainer = styled.div`\n  width: 100%;\n`;","import React, {Suspense} from 'react';\nimport { Route } from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {fetchCollectionsRequest} from './../../redux/shop/act-shop';\nimport  { ShopPageContainer } from './style-shop';\nimport Spinner from './../../components/spinner/spinner'\n\n// import CollectionsOverviewContainer from './../../components/collection-overview/container-collection-overview';\n// import {firestore,convertCollectionsSnapshotToMap} from './../../firebase/firebase-util';\n// import CollectionPageContainer from './../collections/container-collection';\n\n\n\n/** we used container to coresponding component...bcz there is no belongs to shop com  */\n// const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n// render={props => (\n//   <CollectionsOverviewWithSpinner isLoading={isCollectionsFetch} {...props} />\n// )}\n\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n// render={props => (\n//   <CollectionPageWithSpinner isLoading={isCollectionsFetch} {...props} />\n// )}\n\n\nconst CollectionsOverviewContainer = React.lazy(() =>\n  import('./../../components/collection-overview/container-collection-overview')\n);\n\nconst CollectionPageContainer = React.lazy(() =>\n  import('./../collections/container-collection')\n);\n\nclass ShopPage extends React.Component{\n  // state ={\n  //   loading : true,\n  // }\n  // unsubscribeFromSnapshot = null;\n\ncomponentDidMount(){\n  \n  const {fetchCollectionsRequest} = this.props;\n  fetchCollectionsRequest();\n\n  /** replacing thunk with saga  */\n// const {fetchCollectionsRequestAsync} = this.props;\n// fetchCollectionsRequestAsync();\n\n//   /** [these codes moved to redux reducer] */\n//   const {updateCollection} = this.props;\n//   const collectionRef = firestore.collection('collections');\n\n// /** another way [promises] of getting data from firebase using promises */\n//   // collectionRef.get().then(snapShot =>{\n//   //     let collectionMap = convertCollectionsSnapshotToMap(snapShot);\n//   //     updateCollection(collectionMap);\n//   //     this.setState({loading:false})\n//   // }\n//   // )\n\n\n//   /** using [API] ...it will take more time to load */\n//   // fetch('https://firestore.googleapis.com/v1/projects/ecomm-db-ad897/databases/(default)/documents/collections')\n//   // .then(response =>response.json())\n//   // .then(collections => console.log('collection API', collections));\n\n// /**  way of [observable patters --(for firebase)] */\n//   this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapShot =>{\n//     let collectionMap = convertCollectionsSnapshotToMap(snapShot);\n//     updateCollection(collectionMap);\n//     this.setState({loading:false})\n//   })\n\n\n}\n\n\n  render(){\n    const {match} =this.props;\n    // const {loading} = this.state;\n    return(\n      <ShopPageContainer>\n      <Suspense fallback={<Spinner/>}>\n        <Route exact path={`${match.path}`} component={CollectionsOverviewContainer} />\n        <Route\n        path={`${match.path}/:collectionId`}\n        component={CollectionPageContainer}\n      />\n      </Suspense>\n      </ShopPageContainer>\n    );\n  }\n} \n\n// const mapStateToProps = createStructuredSelector({\n//   isCollectionsFetch :selectIsCollectionFetching\n// });\n\n\nconst mapDispatchToProps = dispatch =>({\n  // fetchCollectionsRequestAsync:()=>dispatch(fetchCollectionsRequestAsync())\n  fetchCollectionsRequest: () => dispatch(fetchCollectionsRequest())\n})\n\nexport default connect(null,mapDispatchToProps) (ShopPage);"],"sourceRoot":""}